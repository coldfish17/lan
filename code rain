#include <ncurses.h>  
#include <stdlib.h>  
#include <time.h>  
#include <unistd.h>  
#include <string.h>  
  
#define COLUMNS 10 
#define DROP_COUNT 20  
#define INTERVAL 100000 
   
const char *alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";  
  
typedef struct {  
    int y;  
    char c;  
} Drop;  
  
Drop drops[COLUMNS][DROP_COUNT];  
  
void init_screen() {  
    initscr();  
    noecho();  
    curs_set(FALSE);   
    keypad(stdscr, TRUE);  
    nodelay(stdscr, TRUE);  
    start_color();  
    init_pair(1, COLOR_BLUE, COLOR_BLACK);
  
    
    for (int col = 0; col < COLUMNS; ++col) {  
        for (int i = 0; i < DROP_COUNT; ++i) {  
            drops[col][i].y = rand() % (LINES - 1); 
            drops[col][i].c = alphabet[rand() % strlen(alphabet)]; 
        }  
    }  
}  
  
void draw_rain() {  
    clear();  
  
     
    for (int col = 0; col < COLUMNS; ++col) {  
        for (int i = 0; i < DROP_COUNT; ++i) {  
            attron(COLOR_PAIR(1));   
            mvprintw(drops[col][i].y, col * (COLS / COLUMNS), "%c", drops[col][i].c);   
            attroff(COLOR_PAIR(1));  
        }  
    }  
  
    refresh();
}  
  
void update_drops() {  
    for (int col = 0; col < COLUMNS; ++col) {  
        for (int i = 0; i < DROP_COUNT; ++i) {  
            drops[col][i].y++;  
            if (drops[col][i].y >= LINES - 1) {   
                drops[col][i].y = 0;  
            }  
        }  
    }  
}  
  
int main() {  
    srand(time(NULL));   
    init_screen();   
  
    bool running = true;  
    while (running) {  
        draw_rain();  
        update_drops();   
        usleep(INTERVAL);
  
         
        int ch = getch();  
        if (ch == 'q' || ch == KEY_F(1)) {   
            running = false;  
        }  
    }  
  
    endwin(); 
    return 0;  
}
